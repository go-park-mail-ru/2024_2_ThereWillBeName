{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/healthcheck": {
            "get": {
                "description": "Check the health status of the service",
                "produces": [
                    "text/plain"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "STATUS: OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate a user and return a token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.Credentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "description": "Log out the user by clearing the authentication token",
                "produces": [
                    "application/json"
                ],
                "summary": "Logout a user",
                "responses": {
                    "200": {
                        "description": "Logged out successfully",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/places": {
            "get": {
                "description": "Retrieve a list of places from the database",
                "produces": [
                    "application/json"
                ],
                "summary": "Get a list of places",
                "responses": {
                    "200": {
                        "description": "List of places",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.GetPlace"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new place to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a new place",
                "parameters": [
                    {
                        "description": "Place data",
                        "name": "place",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreatePlace"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Place successfully created",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/places/search": {
            "get": {
                "description": "Get a list of places from the database that match the provided search string",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieve places by search string",
                "parameters": [
                    {
                        "description": "Name of the places to retrieve",
                        "name": "searchString",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of places matching the provided searchString",
                        "schema": {
                            "$ref": "#/definitions/models.GetPlace"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/places/{id}": {
            "get": {
                "description": "Get details of a place from the database by its id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieve an existing place",
                "parameters": [
                    {
                        "description": "ID of the place to retrieve",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of the requested place",
                        "schema": {
                            "$ref": "#/definitions/models.GetPlace"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update the details of an existing place in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update an existing place",
                "parameters": [
                    {
                        "description": "Updated place data",
                        "name": "place",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdatePlace"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Place successfully updated",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a place from the database by its name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Delete an existing place",
                "parameters": [
                    {
                        "description": "Name of the place to be deleted",
                        "name": "name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Place successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/signup": {
            "post": {
                "description": "Create a new user with login and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Sign up a new user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.Credentials"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "description": "Retrieve the current authenticated user information",
                "produces": [
                    "application/json"
                ],
                "summary": "Get the current user",
                "responses": {
                    "200": {
                        "description": "Current user",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "http.Credentials": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "httpresponses.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "models.CreatePlace": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "categoriesId": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "cityId": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "imagePath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "numberOfReviews": {
                    "type": "integer"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "rating": {
                    "type": "integer"
                }
            }
        },
        "models.GetPlace": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "city": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "imagePath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "numberOfReviews": {
                    "type": "integer"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "rating": {
                    "type": "integer"
                }
            }
        },
        "models.UpdatePlace": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "categoriesId": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "cityId": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "imagePath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "numberOfReviews": {
                    "type": "integer"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "rating": {
                    "type": "integer"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "login": {
                    "type": "string"
                }
            }
        }
    }
}
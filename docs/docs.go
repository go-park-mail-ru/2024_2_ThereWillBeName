// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/healthcheck": {
            "get": {
                "description": "Check the health status of the service",
                "produces": [
                    "text/plain"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "STATUS: OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate a user and return a token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.Credentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "description": "Log out the user by clearing the authentication token",
                "produces": [
                    "application/json"
                ],
                "summary": "Logout a user",
                "responses": {
                    "200": {
                        "description": "Logged out successfully",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/places": {
            "get": {
                "description": "Retrieve a list of places from the database",
                "produces": [
                    "application/json"
                ],
                "summary": "Get a list of places",
                "responses": {
                    "200": {
                        "description": "List of places",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Place"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/signup": {
            "post": {
                "description": "Create a new user with login and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Sign up a new user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.Credentials"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips": {
            "post": {
                "description": "Create a new trip with given fields",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a new trip",
                "parameters": [
                    {
                        "description": "Trip details",
                        "name": "trip",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Trip"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Trip created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Trip"
                        }
                    },
                    "400": {
                        "description": "User does not exist",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create trip",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/{id}": {
            "get": {
                "description": "Get trip details by trip ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieve a trip by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trip details",
                        "schema": {
                            "$ref": "#/definitions/models.Trip"
                        }
                    },
                    "400": {
                        "description": "Invalid trip ID",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Trip not found",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve trip",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update trip details by trip ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update an existing trip",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated trip details",
                        "name": "trip",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Trip"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trip updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Trip"
                        }
                    },
                    "400": {
                        "description": "Invalid trip data",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Trip not found",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update trip",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a trip by trip ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete a trip",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Trip deleted successfully"
                    },
                    "400": {
                        "description": "Invalid trip ID",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Trip not found",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Cannot delete trip: it has associated records",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete trip",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "description": "Retrieve the current authenticated user information",
                "produces": [
                    "application/json"
                ],
                "summary": "Get the current user",
                "responses": {
                    "200": {
                        "description": "Current user",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{userID}/trips": {
            "get": {
                "description": "Get all trips for a specific user",
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieve trips by user ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of trips",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Trip"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No trips found fot the user",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve trips",
                        "schema": {
                            "$ref": "#/definitions/httpresponses.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "http.Credentials": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "httpresponses.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "models.Place": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Trip": {
            "type": "object",
            "properties": {
                "city_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "private": {
                    "type": "boolean"
                },
                "start_date": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "login": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

definitions:
  http.Credentials:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  httpresponses.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  models.CreatePlace:
    properties:
      address:
        type: string
      categoriesId:
        items:
          type: integer
        type: array
      cityId:
        type: integer
      description:
        type: string
      imagePath:
        type: string
      name:
        type: string
      numberOfReviews:
        type: integer
      phoneNumber:
        type: string
      rating:
        type: integer
    type: object
  models.GetPlace:
    properties:
      address:
        type: string
      categories:
        items:
          type: string
        type: array
      city:
        type: string
      description:
        type: string
      id:
        type: integer
      imagePath:
        type: string
      name:
        type: string
      numberOfReviews:
        type: integer
      phoneNumber:
        type: string
      rating:
        type: integer
    type: object
  models.UpdatePlace:
    properties:
      address:
        type: string
      categoriesId:
        items:
          type: integer
        type: array
      cityId:
        type: integer
      description:
        type: string
      id:
        type: integer
      imagePath:
        type: string
      name:
        type: string
      numberOfReviews:
        type: integer
      phoneNumber:
        type: string
      rating:
        type: integer
    type: object
  models.User:
    properties:
      created_at:
        type: string
      id:
        type: integer
      login:
        type: string
    type: object
info:
  contact: {}
paths:
  /healthcheck:
    get:
      description: Check the health status of the service
      produces:
      - text/plain
      responses:
        "200":
          description: 'STATUS: OK'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Health check
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a token
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/http.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: Token
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Login a user
  /logout:
    post:
      description: Log out the user by clearing the authentication token
      produces:
      - application/json
      responses:
        "200":
          description: Logged out successfully
          schema:
            type: string
      summary: Logout a user
  /places:
    get:
      description: Retrieve a list of places from the database
      produces:
      - application/json
      responses:
        "200":
          description: List of places
          schema:
            items:
              $ref: '#/definitions/models.GetPlace'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Get a list of places
    post:
      consumes:
      - application/json
      description: Add a new place to the database
      parameters:
      - description: Place data
        in: body
        name: place
        required: true
        schema:
          $ref: '#/definitions/models.CreatePlace'
      produces:
      - application/json
      responses:
        "201":
          description: Place successfully created
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Create a new place
  /places/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a place from the database by its name
      parameters:
      - description: Name of the place to be deleted
        in: body
        name: name
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Place successfully deleted
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Delete an existing place
    get:
      consumes:
      - application/json
      description: Get details of a place from the database by its id
      parameters:
      - description: ID of the place to retrieve
        in: body
        name: id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Details of the requested place
          schema:
            $ref: '#/definitions/models.GetPlace'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Retrieve an existing place
    put:
      consumes:
      - application/json
      description: Update the details of an existing place in the database
      parameters:
      - description: Updated place data
        in: body
        name: place
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePlace'
      produces:
      - application/json
      responses:
        "200":
          description: Place successfully updated
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Update an existing place
  /places/search:
    get:
      consumes:
      - application/json
      description: Get a list of places from the database that match the provided
        search string
      parameters:
      - description: Name of the places to retrieve
        in: body
        name: searchString
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of places matching the provided searchString
          schema:
            $ref: '#/definitions/models.GetPlace'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Retrieve places by search string
  /signup:
    post:
      consumes:
      - application/json
      description: Create a new user with login and password
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/http.Credentials'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Sign up a new user
  /users/me:
    get:
      description: Retrieve the current authenticated user information
      produces:
      - application/json
      responses:
        "200":
          description: Current user
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Get the current user
swagger: "2.0"

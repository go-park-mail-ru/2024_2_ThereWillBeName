definitions:
  http.Credentials:
    properties:
      email:
        type: string
      login:
        type: string
      password:
        type: string
    type: object
  http.TripData:
    properties:
      city_id:
        type: integer
      description:
        type: string
      end_date:
        type: string
      name:
        type: string
      private_trip:
        type: boolean
      start_date:
        type: string
      user_id:
        type: integer
    type: object
  httpresponses.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  models.City:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  models.CreatePlace:
    properties:
      address:
        type: string
      categoriesId:
        items:
          type: integer
        type: array
      cityId:
        type: integer
      description:
        type: string
      imagePath:
        type: string
      name:
        type: string
      numberOfReviews:
        type: integer
      phoneNumber:
        type: string
      rating:
        type: integer
    type: object
  models.GetPlace:
    properties:
      address:
        type: string
      categories:
        items:
          type: string
        type: array
      city:
        type: string
      description:
        type: string
      id:
        type: integer
      imagePath:
        type: string
      name:
        type: string
      numberOfReviews:
        type: integer
      phoneNumber:
        type: string
      rating:
        type: integer
    type: object
  models.GetReview:
    properties:
      avatar_path:
        type: string
      id:
        type: integer
      rating:
        type: integer
      review_text:
        type: string
      user_login:
        type: string
    type: object
  models.GetReviewByUserID:
    properties:
      id:
        type: integer
      place_name:
        type: string
      rating:
        type: integer
      review_text:
        type: string
    type: object
  models.Review:
    properties:
      created_at:
        type: string
      id:
        type: integer
      place_id:
        type: integer
      rating:
        type: integer
      review_text:
        type: string
      user_id:
        type: integer
    type: object
  models.Trip:
    properties:
      city_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      end_date:
        type: string
      id:
        type: integer
      name:
        type: string
      private_trip:
        type: boolean
      start_date:
        type: string
      user_id:
        type: integer
    type: object
  models.UpdatePlace:
    properties:
      address:
        type: string
      categoriesId:
        items:
          type: integer
        type: array
      cityId:
        type: integer
      description:
        type: string
      id:
        type: integer
      imagePath:
        type: string
      name:
        type: string
      numberOfReviews:
        type: integer
      phoneNumber:
        type: string
      rating:
        type: integer
    type: object
  models.User:
    properties:
      avatar_path:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      login:
        type: string
    type: object
  models.UserProfile:
    properties:
      avatar_path:
        type: string
      email:
        type: string
      login:
        type: string
    type: object
info:
  contact: {}
paths:
  /cities/{id}:
    get:
      description: Get city details by city ID
      parameters:
      - description: City ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: City details
          schema:
            $ref: '#/definitions/models.City'
        "400":
          description: Invalid city ID
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "403":
          description: Invalid CSRF token
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "404":
          description: City not found
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Failed to retrieve cities
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Retrieve a city by ID
  /cities/search:
    get:
      description: Get cities details by city name
      produces:
      - application/json
      responses:
        "200":
          description: Cities details
          schema:
            items:
              $ref: '#/definitions/models.City'
            type: array
        "400":
          description: Invalid query
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "403":
          description: Invalid token
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "404":
          description: Cities not found
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Failed to retrieve cities
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Retrieve cities by name
  /healthcheck:
    get:
      description: Check the health status of the service
      produces:
      - text/plain
      responses:
        "200":
          description: 'STATUS: OK'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Health check
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a token
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/http.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: Token
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Login a user
  /logout:
    post:
      description: Log out the user by clearing the authentication token
      produces:
      - application/json
      responses:
        "200":
          description: Logged out successfully
          schema:
            type: string
      summary: Logout a user
  /places:
    get:
      description: Retrieve a list of attractions from the database
      produces:
      - application/json
      responses:
        "200":
          description: List of attractions
          schema:
            items:
              $ref: '#/definitions/models.GetPlace'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Get a list of attractions
    post:
      consumes:
      - application/json
      description: Add a new place to the database
      parameters:
      - description: Place data
        in: body
        name: place
        required: true
        schema:
          $ref: '#/definitions/models.CreatePlace'
      produces:
      - application/json
      responses:
        "201":
          description: Place successfully created
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "403":
          description: Invalid token
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Create a new place
  /places/{id}:
    delete:
      description: Remove a place from the database by its name
      parameters:
      - description: Name of the place to be deleted
        in: body
        name: name
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Place successfully deleted
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "403":
          description: Invalid token
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Delete an existing place
    get:
      description: Get details of a place from the database by its id
      parameters:
      - description: ID of the place to retrieve
        in: body
        name: id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Details of the requested place
          schema:
            $ref: '#/definitions/models.GetPlace'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Retrieve an existing place
    put:
      consumes:
      - application/json
      description: Update the details of an existing place in the database
      parameters:
      - description: Updated place data
        in: body
        name: place
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePlace'
      produces:
      - application/json
      responses:
        "200":
          description: Place successfully updated
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "403":
          description: Invalid token
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Update an existing place
  /places/{placeID}/reviews:
    get:
      description: Get all reviews for a specific place
      parameters:
      - description: Place ID
        in: path
        name: placeID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of reviews
          schema:
            items:
              $ref: '#/definitions/models.Review'
            type: array
        "400":
          description: Invalid place ID
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "404":
          description: No reviews found for the place
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Failed to retrieve reviews
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Retrieve reviews by place ID
  /places/search/{placeName}:
    get:
      description: Get a list of attractions from the database that match the provided
        search string
      parameters:
      - description: Name of the attractions to retrieve
        in: body
        name: searchString
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of attractions matching the provided searchString
          schema:
            $ref: '#/definitions/models.GetPlace'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Retrieve attractions by search string
  /reviews:
    post:
      consumes:
      - application/json
      description: Create a new review for a place
      parameters:
      - description: Review details
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/models.Review'
      produces:
      - application/json
      responses:
        "201":
          description: Review created successfully
          schema:
            $ref: '#/definitions/models.Review'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "403":
          description: Invalid token
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Failed to create review
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Create a new review
  /reviews/{id}:
    delete:
      description: Delete a review by review ID
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Review deleted successfully
        "400":
          description: Invalid review ID
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "403":
          description: Invalid token
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "404":
          description: Review not found
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Failed to delete review
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Delete a review
    get:
      description: Get review details by review ID
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Review details
          schema:
            $ref: '#/definitions/models.GetReview'
        "400":
          description: Invalid review ID
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "404":
          description: Review not found
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Failed to retrieve review
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Retrieve a review by ID
    put:
      consumes:
      - application/json
      description: Update review details by review ID
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated review details
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/models.Review'
      produces:
      - application/json
      responses:
        "200":
          description: Review updated successfully
          schema:
            $ref: '#/definitions/models.Review'
        "400":
          description: Invalid review ID
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "403":
          description: Invalid token
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "404":
          description: Review not found
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Failed to update review
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Update an existing review
  /signup:
    post:
      consumes:
      - application/json
      description: Create a new user with login and password
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/http.Credentials'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Sign up a new user
  /trips:
    post:
      consumes:
      - application/json
      description: Create a new trip with given fields
      parameters:
      - description: Trip details
        in: body
        name: tripData
        required: true
        schema:
          $ref: '#/definitions/http.TripData'
      produces:
      - application/json
      responses:
        "201":
          description: Trip created successfully
          schema:
            $ref: '#/definitions/models.Trip'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "403":
          description: Invalid token
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "404":
          description: Invalid request
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Failed to create trip
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Create a new trip
  /trips/{id}:
    delete:
      description: Delete a trip by trip ID
      parameters:
      - description: Trip ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Trip deleted successfully
        "400":
          description: Invalid trip ID
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "403":
          description: Invalid token
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "404":
          description: Trip not found
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Failed to delete trip
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Delete a trip
    get:
      description: Get trip details by trip ID
      parameters:
      - description: Trip ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Trip details
          schema:
            $ref: '#/definitions/models.Trip'
        "400":
          description: Invalid trip ID
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "404":
          description: Trip not found
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Failed to retrieve trip
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Retrieve a trip by ID
    post:
      description: Add a place with given place_id to a trip
      parameters:
      - description: Trip ID
        in: path
        name: id
        required: true
        type: integer
      - description: Place ID
        in: body
        name: place_id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Place added to trip successfully
        "400":
          description: Invalid place ID
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "404":
          description: Place not found
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Failed to add place to trip
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Add a place to a trip
    put:
      consumes:
      - application/json
      description: Update trip details by trip ID
      parameters:
      - description: Trip ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated trip details
        in: body
        name: tripData
        required: true
        schema:
          $ref: '#/definitions/http.TripData'
      produces:
      - application/json
      responses:
        "200":
          description: Trip updated successfully
          schema:
            $ref: '#/definitions/models.Trip'
        "400":
          description: Invalid trip data
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "403":
          description: Invalid token
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "404":
          description: Trip not found
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Failed to update trip
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Update an existing trip
  /users/{userID}/avatar:
    put:
      consumes:
      - multipart/form-data
      description: Upload an avatar image for the user
      parameters:
      - description: Avatar file
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Avatar uploaded successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Upload user avatar
  /users/{userID}/profile:
    get:
      description: Retrieve the user profile information
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User profile
          schema:
            $ref: '#/definitions/models.UserProfile'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Get user profile
  /users/{userID}/reviews:
    get:
      description: Get all reviews for an user
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of reviews
          schema:
            items:
              $ref: '#/definitions/models.GetReviewByUserID'
            type: array
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "404":
          description: No reviews found for the user
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Failed to retrieve reviews
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Retrieve reviews by user ID
  /users/{userID}/trips:
    get:
      description: Get all trips for a specific user
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of trips
          schema:
            items:
              $ref: '#/definitions/models.Trip'
            type: array
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "403":
          description: Invalid token
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "404":
          description: Trips not found
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Failed to retrieve trips
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Retrieve trips by user ID
  /users/me:
    get:
      description: Retrieve the current authenticated user information
      produces:
      - application/json
      responses:
        "200":
          description: Current user
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpresponses.ErrorResponse'
      summary: Get the current user
swagger: "2.0"

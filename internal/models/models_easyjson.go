// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels(in *jlexer.Lexer, out *UserSurveyStatsList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(UserSurveyStatsList, 0, 2)
			} else {
				*out = UserSurveyStatsList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 UserSurveyStats
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels(out *jwriter.Writer, in UserSurveyStatsList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v UserSurveyStatsList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserSurveyStatsList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserSurveyStatsList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserSurveyStatsList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels1(in *jlexer.Lexer, out *UserSurveyStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "survey_id":
			out.SurveyId = uint(in.Uint())
		case "survey_text":
			out.SurveyText = string(in.String())
		case "answered":
			out.Answered = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels1(out *jwriter.Writer, in UserSurveyStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"survey_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.SurveyId))
	}
	{
		const prefix string = ",\"survey_text\":"
		out.RawString(prefix)
		out.String(string(in.SurveyText))
	}
	{
		const prefix string = ",\"answered\":"
		out.RawString(prefix)
		out.Bool(bool(in.Answered))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserSurveyStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserSurveyStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserSurveyStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserSurveyStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels1(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels2(in *jlexer.Lexer, out *UserResponseWithToken) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			(out.User).UnmarshalEasyJSON(in)
		case "token":
			out.Token = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels2(out *jwriter.Writer, in UserResponseWithToken) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		(in.User).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix)
		out.String(string(in.Token))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserResponseWithToken) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserResponseWithToken) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserResponseWithToken) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserResponseWithToken) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels2(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels3(in *jlexer.Lexer, out *UserResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint32(in.Uint32())
		case "profile":
			(out.Profile).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels3(out *jwriter.Writer, in UserResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.ID))
	}
	{
		const prefix string = ",\"profile\":"
		out.RawString(prefix)
		(in.Profile).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels3(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels4(in *jlexer.Lexer, out *UserProfile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "avatar_path":
			out.AvatarPath = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels4(out *jwriter.Writer, in UserProfile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"avatar_path\":"
		out.RawString(prefix)
		out.String(string(in.AvatarPath))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserProfile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserProfile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserProfile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserProfile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels4(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels5(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "login":
			out.Login = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "avatar_path":
			out.AvatarPath = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels5(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"avatar_path\":"
		out.RawString(prefix)
		out.String(string(in.AvatarPath))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels5(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels6(in *jlexer.Lexer, out *UpdatePlace) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "imagePath":
			out.ImagePath = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "rating":
			out.Rating = float64(in.Float64())
		case "numberOfReviews":
			out.NumberOfReviews = int(in.Int())
		case "address":
			out.Address = string(in.String())
		case "cityId":
			out.CityId = int(in.Int())
		case "phoneNumber":
			out.PhoneNumber = string(in.String())
		case "categoriesId":
			if in.IsNull() {
				in.Skip()
				out.CategoriesId = nil
			} else {
				in.Delim('[')
				if out.CategoriesId == nil {
					if !in.IsDelim(']') {
						out.CategoriesId = make([]int, 0, 8)
					} else {
						out.CategoriesId = []int{}
					}
				} else {
					out.CategoriesId = (out.CategoriesId)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int
					v4 = int(in.Int())
					out.CategoriesId = append(out.CategoriesId, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "latitude":
			out.Latitude = float64(in.Float64())
		case "longitude":
			out.Longitude = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels6(out *jwriter.Writer, in UpdatePlace) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"imagePath\":"
		out.RawString(prefix)
		out.String(string(in.ImagePath))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float64(float64(in.Rating))
	}
	{
		const prefix string = ",\"numberOfReviews\":"
		out.RawString(prefix)
		out.Int(int(in.NumberOfReviews))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"cityId\":"
		out.RawString(prefix)
		out.Int(int(in.CityId))
	}
	{
		const prefix string = ",\"phoneNumber\":"
		out.RawString(prefix)
		out.String(string(in.PhoneNumber))
	}
	{
		const prefix string = ",\"categoriesId\":"
		out.RawString(prefix)
		if in.CategoriesId == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.CategoriesId {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"latitude\":"
		out.RawString(prefix)
		out.Float64(float64(in.Latitude))
	}
	{
		const prefix string = ",\"longitude\":"
		out.RawString(prefix)
		out.Float64(float64(in.Longitude))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdatePlace) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdatePlace) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdatePlace) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdatePlace) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels6(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels7(in *jlexer.Lexer, out *TripResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "trip":
			(out.Trip).UnmarshalEasyJSON(in)
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]UserProfile, 0, 1)
					} else {
						out.Users = []UserProfile{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v7 UserProfile
					(v7).UnmarshalEasyJSON(in)
					out.Users = append(out.Users, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels7(out *jwriter.Writer, in TripResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"trip\":"
		out.RawString(prefix[1:])
		(in.Trip).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix)
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Users {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TripResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TripResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TripResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TripResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels7(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels8(in *jlexer.Lexer, out *TripList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(TripList, 0, 0)
			} else {
				*out = TripList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v10 Trip
			(v10).UnmarshalEasyJSON(in)
			*out = append(*out, v10)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels8(out *jwriter.Writer, in TripList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in {
			if v11 > 0 {
				out.RawByte(',')
			}
			(v12).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v TripList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TripList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TripList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TripList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels8(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels9(in *jlexer.Lexer, out *Trip) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "user_id":
			out.UserID = uint(in.Uint())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "city_id":
			out.CityID = uint(in.Uint())
		case "start_date":
			out.StartDate = string(in.String())
		case "end_date":
			out.EndDate = string(in.String())
		case "private_trip":
			out.Private = bool(in.Bool())
		case "photos":
			if in.IsNull() {
				in.Skip()
				out.Photos = nil
			} else {
				in.Delim('[')
				if out.Photos == nil {
					if !in.IsDelim(']') {
						out.Photos = make([]string, 0, 4)
					} else {
						out.Photos = []string{}
					}
				} else {
					out.Photos = (out.Photos)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.Photos = append(out.Photos, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels9(out *jwriter.Writer, in Trip) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.UserID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"city_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.CityID))
	}
	{
		const prefix string = ",\"start_date\":"
		out.RawString(prefix)
		out.String(string(in.StartDate))
	}
	{
		const prefix string = ",\"end_date\":"
		out.RawString(prefix)
		out.String(string(in.EndDate))
	}
	{
		const prefix string = ",\"private_trip\":"
		out.RawString(prefix)
		out.Bool(bool(in.Private))
	}
	{
		const prefix string = ",\"photos\":"
		out.RawString(prefix)
		if in.Photos == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Photos {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Trip) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Trip) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Trip) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Trip) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels9(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels10(in *jlexer.Lexer, out *SurveyStatsBySurvey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "survey_id":
			out.SurveyId = uint(in.Uint())
		case "survey_text":
			out.SurveyText = string(in.String())
		case "avg_rating":
			out.AvgRating = float64(in.Float64())
		case "ratings_count":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.RatingsCount = make(map[int]int)
				for !in.IsDelim('}') {
					key := int(in.IntStr())
					in.WantColon()
					var v16 int
					v16 = int(in.Int())
					(out.RatingsCount)[key] = v16
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels10(out *jwriter.Writer, in SurveyStatsBySurvey) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"survey_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.SurveyId))
	}
	{
		const prefix string = ",\"survey_text\":"
		out.RawString(prefix)
		out.String(string(in.SurveyText))
	}
	{
		const prefix string = ",\"avg_rating\":"
		out.RawString(prefix)
		out.Float64(float64(in.AvgRating))
	}
	{
		const prefix string = ",\"ratings_count\":"
		out.RawString(prefix)
		if in.RatingsCount == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.RatingsCount {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v17Name))
				out.RawByte(':')
				out.Int(int(v17Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SurveyStatsBySurvey) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SurveyStatsBySurvey) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SurveyStatsBySurvey) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SurveyStatsBySurvey) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels10(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels11(in *jlexer.Lexer, out *SurveyResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "survey_id":
			out.SurveyId = uint(in.Uint())
		case "user_id":
			out.UserId = uint(in.Uint())
		case "rating":
			out.Rating = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels11(out *jwriter.Writer, in SurveyResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"survey_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.SurveyId))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.UserId))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Int(int(in.Rating))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SurveyResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SurveyResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SurveyResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SurveyResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels11(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels12(in *jlexer.Lexer, out *Survey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint(in.Uint())
		case "survey_text":
			out.SurveyText = string(in.String())
		case "max_rating":
			out.MaxRating = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels12(out *jwriter.Writer, in Survey) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Id))
	}
	{
		const prefix string = ",\"survey_text\":"
		out.RawString(prefix)
		out.String(string(in.SurveyText))
	}
	{
		const prefix string = ",\"max_rating\":"
		out.RawString(prefix)
		out.Int(int(in.MaxRating))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Survey) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Survey) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Survey) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Survey) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels12(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels13(in *jlexer.Lexer, out *SharingToken) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "trip_id":
			out.TripID = uint(in.Uint())
		case "token":
			out.Token = string(in.String())
		case "sharing_option":
			out.SharingOption = string(in.String())
		case "expires_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ExpiresAt).UnmarshalJSON(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels13(out *jwriter.Writer, in SharingToken) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"trip_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.TripID))
	}
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix)
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"sharing_option\":"
		out.RawString(prefix)
		out.String(string(in.SharingOption))
	}
	{
		const prefix string = ",\"expires_at\":"
		out.RawString(prefix)
		out.Raw((in.ExpiresAt).MarshalJSON())
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SharingToken) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SharingToken) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SharingToken) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SharingToken) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels13(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels14(in *jlexer.Lexer, out *SearchResultList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(SearchResultList, 0, 1)
			} else {
				*out = SearchResultList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v18 SearchResult
			(v18).UnmarshalEasyJSON(in)
			*out = append(*out, v18)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels14(out *jwriter.Writer, in SearchResultList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v19, v20 := range in {
			if v19 > 0 {
				out.RawByte(',')
			}
			(v20).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v SearchResultList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchResultList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchResultList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchResultList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels14(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels15(in *jlexer.Lexer, out *SearchResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "id":
			out.Id = uint(in.Uint())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels15(out *jwriter.Writer, in SearchResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Uint(uint(in.Id))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels15(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels16(in *jlexer.Lexer, out *ReviewList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ReviewList, 0, 0)
			} else {
				*out = ReviewList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v21 Review
			(v21).UnmarshalEasyJSON(in)
			*out = append(*out, v21)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels16(out *jwriter.Writer, in ReviewList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v22, v23 := range in {
			if v22 > 0 {
				out.RawByte(',')
			}
			(v23).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ReviewList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReviewList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReviewList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReviewList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels16(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels17(in *jlexer.Lexer, out *Review) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "user_id":
			out.UserID = uint(in.Uint())
		case "place_id":
			out.PlaceID = uint(in.Uint())
		case "rating":
			out.Rating = int(in.Int())
		case "review_text":
			out.ReviewText = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels17(out *jwriter.Writer, in Review) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.UserID))
	}
	{
		const prefix string = ",\"place_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.PlaceID))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Int(int(in.Rating))
	}
	{
		const prefix string = ",\"review_text\":"
		out.RawString(prefix)
		out.String(string(in.ReviewText))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Review) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Review) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Review) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Review) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels17(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels18(in *jlexer.Lexer, out *ResponseWithId) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels18(out *jwriter.Writer, in ResponseWithId) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseWithId) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseWithId) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseWithId) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseWithId) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels18(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels19(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels19(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels19(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels20(in *jlexer.Lexer, out *PhotoList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(PhotoList, 0, 4)
			} else {
				*out = PhotoList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v24 Photo
			(v24).UnmarshalEasyJSON(in)
			*out = append(*out, v24)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels20(out *jwriter.Writer, in PhotoList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v25, v26 := range in {
			if v25 > 0 {
				out.RawByte(',')
			}
			(v26).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v PhotoList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotoList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotoList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotoList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels20(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels21(in *jlexer.Lexer, out *Photo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels21(out *jwriter.Writer, in Photo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Photo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Photo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Photo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Photo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels21(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels22(in *jlexer.Lexer, out *OutboxRecord) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "event_type":
			out.EventType = string(in.String())
		case "payload":
			out.Payload = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "processed_at":
			if in.IsNull() {
				in.Skip()
				out.ProcessedAt = nil
			} else {
				if out.ProcessedAt == nil {
					out.ProcessedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ProcessedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels22(out *jwriter.Writer, in OutboxRecord) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"event_type\":"
		out.RawString(prefix)
		out.String(string(in.EventType))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if in.ProcessedAt != nil {
		const prefix string = ",\"processed_at\":"
		out.RawString(prefix)
		out.Raw((*in.ProcessedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OutboxRecord) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OutboxRecord) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OutboxRecord) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OutboxRecord) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels22(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels23(in *jlexer.Lexer, out *GetReviewList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(GetReviewList, 0, 1)
			} else {
				*out = GetReviewList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v27 GetReview
			(v27).UnmarshalEasyJSON(in)
			*out = append(*out, v27)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels23(out *jwriter.Writer, in GetReviewList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v28, v29 := range in {
			if v28 > 0 {
				out.RawByte(',')
			}
			(v29).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v GetReviewList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetReviewList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetReviewList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetReviewList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels23(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels24(in *jlexer.Lexer, out *GetReviewByUserIDList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(GetReviewByUserIDList, 0, 1)
			} else {
				*out = GetReviewByUserIDList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v30 GetReviewByUserID
			(v30).UnmarshalEasyJSON(in)
			*out = append(*out, v30)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels24(out *jwriter.Writer, in GetReviewByUserIDList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v31, v32 := range in {
			if v31 > 0 {
				out.RawByte(',')
			}
			(v32).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v GetReviewByUserIDList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetReviewByUserIDList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetReviewByUserIDList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetReviewByUserIDList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels24(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels25(in *jlexer.Lexer, out *GetReviewByUserID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "place_name":
			out.PlaceName = string(in.String())
		case "rating":
			out.Rating = int(in.Int())
		case "review_text":
			out.ReviewText = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels25(out *jwriter.Writer, in GetReviewByUserID) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"place_name\":"
		out.RawString(prefix)
		out.String(string(in.PlaceName))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Int(int(in.Rating))
	}
	{
		const prefix string = ",\"review_text\":"
		out.RawString(prefix)
		out.String(string(in.ReviewText))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetReviewByUserID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetReviewByUserID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetReviewByUserID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetReviewByUserID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels25(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels26(in *jlexer.Lexer, out *GetReview) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "user_login":
			out.UserLogin = string(in.String())
		case "avatar_path":
			out.AvatarPath = string(in.String())
		case "rating":
			out.Rating = int(in.Int())
		case "review_text":
			out.ReviewText = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels26(out *jwriter.Writer, in GetReview) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"user_login\":"
		out.RawString(prefix)
		out.String(string(in.UserLogin))
	}
	{
		const prefix string = ",\"avatar_path\":"
		out.RawString(prefix)
		out.String(string(in.AvatarPath))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Int(int(in.Rating))
	}
	{
		const prefix string = ",\"review_text\":"
		out.RawString(prefix)
		out.String(string(in.ReviewText))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetReview) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetReview) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetReview) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetReview) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels26(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels27(in *jlexer.Lexer, out *GetPlace) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "imagePath":
			out.ImagePath = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "rating":
			out.Rating = float32(in.Float32())
		case "numberOfReviews":
			out.NumberOfReviews = int(in.Int())
		case "address":
			out.Address = string(in.String())
		case "city":
			out.City = string(in.String())
		case "phoneNumber":
			out.PhoneNumber = string(in.String())
		case "categories":
			if in.IsNull() {
				in.Skip()
				out.Categories = nil
			} else {
				in.Delim('[')
				if out.Categories == nil {
					if !in.IsDelim(']') {
						out.Categories = make([]string, 0, 4)
					} else {
						out.Categories = []string{}
					}
				} else {
					out.Categories = (out.Categories)[:0]
				}
				for !in.IsDelim(']') {
					var v33 string
					v33 = string(in.String())
					out.Categories = append(out.Categories, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "latitude":
			out.Latitude = float32(in.Float32())
		case "longitude":
			out.Longitude = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels27(out *jwriter.Writer, in GetPlace) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"imagePath\":"
		out.RawString(prefix)
		out.String(string(in.ImagePath))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rating))
	}
	{
		const prefix string = ",\"numberOfReviews\":"
		out.RawString(prefix)
		out.Int(int(in.NumberOfReviews))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"phoneNumber\":"
		out.RawString(prefix)
		out.String(string(in.PhoneNumber))
	}
	{
		const prefix string = ",\"categories\":"
		out.RawString(prefix)
		if in.Categories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.Categories {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.String(string(v35))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"latitude\":"
		out.RawString(prefix)
		out.Float32(float32(in.Latitude))
	}
	{
		const prefix string = ",\"longitude\":"
		out.RawString(prefix)
		out.Float32(float32(in.Longitude))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetPlace) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetPlace) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetPlace) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetPlace) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels27(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels28(in *jlexer.Lexer, out *GetPLaceList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(GetPLaceList, 0, 0)
			} else {
				*out = GetPLaceList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v36 GetPlace
			(v36).UnmarshalEasyJSON(in)
			*out = append(*out, v36)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels28(out *jwriter.Writer, in GetPLaceList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v37, v38 := range in {
			if v37 > 0 {
				out.RawByte(',')
			}
			(v38).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v GetPLaceList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetPLaceList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetPLaceList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetPLaceList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels28(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels29(in *jlexer.Lexer, out *CreateSharingLinkResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels29(out *jwriter.Writer, in CreateSharingLinkResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateSharingLinkResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateSharingLinkResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateSharingLinkResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateSharingLinkResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels29(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels30(in *jlexer.Lexer, out *CreatePlace) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "imagePath":
			out.ImagePath = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "rating":
			out.Rating = float64(in.Float64())
		case "numberOfReviews":
			out.NumberOfReviews = int(in.Int())
		case "address":
			out.Address = string(in.String())
		case "cityId":
			out.CityId = int(in.Int())
		case "phoneNumber":
			out.PhoneNumber = string(in.String())
		case "categoriesId":
			if in.IsNull() {
				in.Skip()
				out.CategoriesId = nil
			} else {
				in.Delim('[')
				if out.CategoriesId == nil {
					if !in.IsDelim(']') {
						out.CategoriesId = make([]int, 0, 8)
					} else {
						out.CategoriesId = []int{}
					}
				} else {
					out.CategoriesId = (out.CategoriesId)[:0]
				}
				for !in.IsDelim(']') {
					var v39 int
					v39 = int(in.Int())
					out.CategoriesId = append(out.CategoriesId, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "latitude":
			out.Latitude = float64(in.Float64())
		case "longitude":
			out.Longitude = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels30(out *jwriter.Writer, in CreatePlace) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"imagePath\":"
		out.RawString(prefix)
		out.String(string(in.ImagePath))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float64(float64(in.Rating))
	}
	{
		const prefix string = ",\"numberOfReviews\":"
		out.RawString(prefix)
		out.Int(int(in.NumberOfReviews))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"cityId\":"
		out.RawString(prefix)
		out.Int(int(in.CityId))
	}
	{
		const prefix string = ",\"phoneNumber\":"
		out.RawString(prefix)
		out.String(string(in.PhoneNumber))
	}
	{
		const prefix string = ",\"categoriesId\":"
		out.RawString(prefix)
		if in.CategoriesId == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v40, v41 := range in.CategoriesId {
				if v40 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v41))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"latitude\":"
		out.RawString(prefix)
		out.Float64(float64(in.Latitude))
	}
	{
		const prefix string = ",\"longitude\":"
		out.RawString(prefix)
		out.Float64(float64(in.Longitude))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreatePlace) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreatePlace) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreatePlace) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreatePlace) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels30(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels31(in *jlexer.Lexer, out *ConfigGrpc) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Port":
			out.Port = int(in.Int())
		case "ConnStr":
			out.ConnStr = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels31(out *jwriter.Writer, in ConfigGrpc) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Port\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Port))
	}
	{
		const prefix string = ",\"ConnStr\":"
		out.RawString(prefix)
		out.String(string(in.ConnStr))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConfigGrpc) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConfigGrpc) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConfigGrpc) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConfigGrpc) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels31(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels32(in *jlexer.Lexer, out *Config) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Port":
			out.Port = int(in.Int())
		case "Env":
			out.Env = string(in.String())
		case "AllowedOrigin":
			out.AllowedOrigin = string(in.String())
		case "ConnStr":
			out.ConnStr = string(in.String())
		case "GRPCPort":
			out.GRPCPort = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels32(out *jwriter.Writer, in Config) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Port\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Port))
	}
	{
		const prefix string = ",\"Env\":"
		out.RawString(prefix)
		out.String(string(in.Env))
	}
	{
		const prefix string = ",\"AllowedOrigin\":"
		out.RawString(prefix)
		out.String(string(in.AllowedOrigin))
	}
	{
		const prefix string = ",\"ConnStr\":"
		out.RawString(prefix)
		out.String(string(in.ConnStr))
	}
	{
		const prefix string = ",\"GRPCPort\":"
		out.RawString(prefix)
		out.Int(int(in.GRPCPort))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Config) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Config) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Config) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Config) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels32(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels33(in *jlexer.Lexer, out *CityList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(CityList, 0, 1)
			} else {
				*out = CityList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v42 City
			(v42).UnmarshalEasyJSON(in)
			*out = append(*out, v42)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels33(out *jwriter.Writer, in CityList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v43, v44 := range in {
			if v43 > 0 {
				out.RawByte(',')
			}
			(v44).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v CityList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CityList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CityList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CityList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels33(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels34(in *jlexer.Lexer, out *City) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "name":
			out.Name = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels34(out *jwriter.Writer, in City) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v City) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v City) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *City) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *City) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels34(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels35(in *jlexer.Lexer, out *CategoryList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(CategoryList, 0, 2)
			} else {
				*out = CategoryList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v45 Category
			(v45).UnmarshalEasyJSON(in)
			*out = append(*out, v45)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels35(out *jwriter.Writer, in CategoryList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v46, v47 := range in {
			if v46 > 0 {
				out.RawByte(',')
			}
			(v47).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v CategoryList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CategoryList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CategoryList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CategoryList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels35(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels36(in *jlexer.Lexer, out *Category) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "Name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels36(out *jwriter.Writer, in Category) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Category) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Category) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Category) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Category) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels36(l, v)
}
func easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels37(in *jlexer.Lexer, out *AddPlaceRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "place_id":
			out.PlaceID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels37(out *jwriter.Writer, in AddPlaceRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"place_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.PlaceID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddPlaceRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddPlaceRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20242ThereWillBeNameInternalModels37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddPlaceRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddPlaceRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20242ThereWillBeNameInternalModels37(l, v)
}

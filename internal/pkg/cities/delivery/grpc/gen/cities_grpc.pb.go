// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc2
// source: proto/cities.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Cities_SearchCitiesByName_FullMethodName = "/cities.Cities/SearchCitiesByName"
	Cities_SearchCityByID_FullMethodName     = "/cities.Cities/SearchCityByID"
)

// CitiesClient is the client API for Cities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CitiesClient interface {
	SearchCitiesByName(ctx context.Context, in *SearchCitiesByNameRequest, opts ...grpc.CallOption) (*SearchCitiesByNameResponse, error)
	SearchCityByID(ctx context.Context, in *SearchCityByIDRequest, opts ...grpc.CallOption) (*SearchCityByIDResponse, error)
}

type citiesClient struct {
	cc grpc.ClientConnInterface
}

func NewCitiesClient(cc grpc.ClientConnInterface) CitiesClient {
	return &citiesClient{cc}
}

func (c *citiesClient) SearchCitiesByName(ctx context.Context, in *SearchCitiesByNameRequest, opts ...grpc.CallOption) (*SearchCitiesByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchCitiesByNameResponse)
	err := c.cc.Invoke(ctx, Cities_SearchCitiesByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citiesClient) SearchCityByID(ctx context.Context, in *SearchCityByIDRequest, opts ...grpc.CallOption) (*SearchCityByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchCityByIDResponse)
	err := c.cc.Invoke(ctx, Cities_SearchCityByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CitiesServer is the server API for Cities service.
// All implementations must embed UnimplementedCitiesServer
// for forward compatibility.
type CitiesServer interface {
	SearchCitiesByName(context.Context, *SearchCitiesByNameRequest) (*SearchCitiesByNameResponse, error)
	SearchCityByID(context.Context, *SearchCityByIDRequest) (*SearchCityByIDResponse, error)
	mustEmbedUnimplementedCitiesServer()
}

// UnimplementedCitiesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCitiesServer struct{}

func (UnimplementedCitiesServer) SearchCitiesByName(context.Context, *SearchCitiesByNameRequest) (*SearchCitiesByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCitiesByName not implemented")
}
func (UnimplementedCitiesServer) SearchCityByID(context.Context, *SearchCityByIDRequest) (*SearchCityByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCityByID not implemented")
}
func (UnimplementedCitiesServer) mustEmbedUnimplementedCitiesServer() {}
func (UnimplementedCitiesServer) testEmbeddedByValue()                {}

// UnsafeCitiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CitiesServer will
// result in compilation errors.
type UnsafeCitiesServer interface {
	mustEmbedUnimplementedCitiesServer()
}

func RegisterCitiesServer(s grpc.ServiceRegistrar, srv CitiesServer) {
	// If the following call pancis, it indicates UnimplementedCitiesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Cities_ServiceDesc, srv)
}

func _Cities_SearchCitiesByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCitiesByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitiesServer).SearchCitiesByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cities_SearchCitiesByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitiesServer).SearchCitiesByName(ctx, req.(*SearchCitiesByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cities_SearchCityByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCityByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitiesServer).SearchCityByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cities_SearchCityByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitiesServer).SearchCityByID(ctx, req.(*SearchCityByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cities_ServiceDesc is the grpc.ServiceDesc for Cities service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cities_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cities.Cities",
	HandlerType: (*CitiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchCitiesByName",
			Handler:    _Cities_SearchCitiesByName_Handler,
		},
		{
			MethodName: "SearchCityByID",
			Handler:    _Cities_SearchCityByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cities.proto",
}

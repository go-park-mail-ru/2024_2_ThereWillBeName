// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/places/interfaces.go

// Package places is a generated GoMock package.
package places

import (
	models "2024_2_ThereWillBeName/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPlaceRepo is a mock of PlaceRepo interface.
type MockPlaceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPlaceRepoMockRecorder
}

// MockPlaceRepoMockRecorder is the mock recorder for MockPlaceRepo.
type MockPlaceRepoMockRecorder struct {
	mock *MockPlaceRepo
}

// NewMockPlaceRepo creates a new mock instance.
func NewMockPlaceRepo(ctrl *gomock.Controller) *MockPlaceRepo {
	mock := &MockPlaceRepo{ctrl: ctrl}
	mock.recorder = &MockPlaceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaceRepo) EXPECT() *MockPlaceRepoMockRecorder {
	return m.recorder
}

// GetPlaces mocks base method.
func (m *MockPlaceRepo) GetPlaces(ctx context.Context) ([]models.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaces", ctx)
	ret0, _ := ret[0].([]models.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaces indicates an expected call of GetPlaces.
func (mr *MockPlaceRepoMockRecorder) GetPlaces(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaces", reflect.TypeOf((*MockPlaceRepo)(nil).GetPlaces), ctx)
}

// MockPlaceUsecase is a mock of PlaceUsecase interface.
type MockPlaceUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPlaceUsecaseMockRecorder
}

// MockPlaceUsecaseMockRecorder is the mock recorder for MockPlaceUsecase.
type MockPlaceUsecaseMockRecorder struct {
	mock *MockPlaceUsecase
}

// NewMockPlaceUsecase creates a new mock instance.
func NewMockPlaceUsecase(ctrl *gomock.Controller) *MockPlaceUsecase {
	mock := &MockPlaceUsecase{ctrl: ctrl}
	mock.recorder = &MockPlaceUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaceUsecase) EXPECT() *MockPlaceUsecaseMockRecorder {
	return m.recorder
}

// GetPlaces mocks base method.
func (m *MockPlaceUsecase) GetPlaces(ctx context.Context) ([]models.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaces", ctx)
	ret0, _ := ret[0].([]models.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaces indicates an expected call of GetPlaces.
func (mr *MockPlaceUsecaseMockRecorder) GetPlaces(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaces", reflect.TypeOf((*MockPlaceUsecase)(nil).GetPlaces), ctx)
}

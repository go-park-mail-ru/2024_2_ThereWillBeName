// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/survey.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SurveyService_GetSurveyById_FullMethodName            = "/survey.SurveyService/GetSurveyById"
	SurveyService_CreateSurvey_FullMethodName             = "/survey.SurveyService/CreateSurvey"
	SurveyService_GetSurveyStatsBySurveyId_FullMethodName = "/survey.SurveyService/GetSurveyStatsBySurveyId"
	SurveyService_GetSurveyStatsByUserId_FullMethodName   = "/survey.SurveyService/GetSurveyStatsByUserId"
)

// SurveyServiceClient is the client API for SurveyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SurveyServiceClient interface {
	GetSurveyById(ctx context.Context, in *GetSurveyByIdRequest, opts ...grpc.CallOption) (*GetSurveyByIdResponce, error)
	CreateSurvey(ctx context.Context, in *CreateSurveyRequest, opts ...grpc.CallOption) (*CreateSurveyResponce, error)
	GetSurveyStatsBySurveyId(ctx context.Context, in *GetSurveyStatsBySurveyIdRequest, opts ...grpc.CallOption) (*GetSurveyStatsBySurveyIdResponce, error)
	GetSurveyStatsByUserId(ctx context.Context, in *GetSurveyStatsByUserIdRequest, opts ...grpc.CallOption) (*GetSurveyStatsByUserIdResponce, error)
}

type surveyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSurveyServiceClient(cc grpc.ClientConnInterface) SurveyServiceClient {
	return &surveyServiceClient{cc}
}

func (c *surveyServiceClient) GetSurveyById(ctx context.Context, in *GetSurveyByIdRequest, opts ...grpc.CallOption) (*GetSurveyByIdResponce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSurveyByIdResponce)
	err := c.cc.Invoke(ctx, SurveyService_GetSurveyById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) CreateSurvey(ctx context.Context, in *CreateSurveyRequest, opts ...grpc.CallOption) (*CreateSurveyResponce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSurveyResponce)
	err := c.cc.Invoke(ctx, SurveyService_CreateSurvey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) GetSurveyStatsBySurveyId(ctx context.Context, in *GetSurveyStatsBySurveyIdRequest, opts ...grpc.CallOption) (*GetSurveyStatsBySurveyIdResponce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSurveyStatsBySurveyIdResponce)
	err := c.cc.Invoke(ctx, SurveyService_GetSurveyStatsBySurveyId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) GetSurveyStatsByUserId(ctx context.Context, in *GetSurveyStatsByUserIdRequest, opts ...grpc.CallOption) (*GetSurveyStatsByUserIdResponce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSurveyStatsByUserIdResponce)
	err := c.cc.Invoke(ctx, SurveyService_GetSurveyStatsByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SurveyServiceServer is the server API for SurveyService service.
// All implementations must embed UnimplementedSurveyServiceServer
// for forward compatibility.
type SurveyServiceServer interface {
	GetSurveyById(context.Context, *GetSurveyByIdRequest) (*GetSurveyByIdResponce, error)
	CreateSurvey(context.Context, *CreateSurveyRequest) (*CreateSurveyResponce, error)
	GetSurveyStatsBySurveyId(context.Context, *GetSurveyStatsBySurveyIdRequest) (*GetSurveyStatsBySurveyIdResponce, error)
	GetSurveyStatsByUserId(context.Context, *GetSurveyStatsByUserIdRequest) (*GetSurveyStatsByUserIdResponce, error)
	mustEmbedUnimplementedSurveyServiceServer()
}

// UnimplementedSurveyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSurveyServiceServer struct{}

func (UnimplementedSurveyServiceServer) GetSurveyById(context.Context, *GetSurveyByIdRequest) (*GetSurveyByIdResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyById not implemented")
}
func (UnimplementedSurveyServiceServer) CreateSurvey(context.Context, *CreateSurveyRequest) (*CreateSurveyResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSurvey not implemented")
}
func (UnimplementedSurveyServiceServer) GetSurveyStatsBySurveyId(context.Context, *GetSurveyStatsBySurveyIdRequest) (*GetSurveyStatsBySurveyIdResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyStatsBySurveyId not implemented")
}
func (UnimplementedSurveyServiceServer) GetSurveyStatsByUserId(context.Context, *GetSurveyStatsByUserIdRequest) (*GetSurveyStatsByUserIdResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyStatsByUserId not implemented")
}
func (UnimplementedSurveyServiceServer) mustEmbedUnimplementedSurveyServiceServer() {}
func (UnimplementedSurveyServiceServer) testEmbeddedByValue()                       {}

// UnsafeSurveyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SurveyServiceServer will
// result in compilation errors.
type UnsafeSurveyServiceServer interface {
	mustEmbedUnimplementedSurveyServiceServer()
}

func RegisterSurveyServiceServer(s grpc.ServiceRegistrar, srv SurveyServiceServer) {
	// If the following call pancis, it indicates UnimplementedSurveyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SurveyService_ServiceDesc, srv)
}

func _SurveyService_GetSurveyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSurveyByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).GetSurveyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SurveyService_GetSurveyById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).GetSurveyById(ctx, req.(*GetSurveyByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_CreateSurvey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSurveyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).CreateSurvey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SurveyService_CreateSurvey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).CreateSurvey(ctx, req.(*CreateSurveyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_GetSurveyStatsBySurveyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSurveyStatsBySurveyIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).GetSurveyStatsBySurveyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SurveyService_GetSurveyStatsBySurveyId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).GetSurveyStatsBySurveyId(ctx, req.(*GetSurveyStatsBySurveyIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_GetSurveyStatsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSurveyStatsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).GetSurveyStatsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SurveyService_GetSurveyStatsByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).GetSurveyStatsByUserId(ctx, req.(*GetSurveyStatsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SurveyService_ServiceDesc is the grpc.ServiceDesc for SurveyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SurveyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "survey.SurveyService",
	HandlerType: (*SurveyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSurveyById",
			Handler:    _SurveyService_GetSurveyById_Handler,
		},
		{
			MethodName: "CreateSurvey",
			Handler:    _SurveyService_CreateSurvey_Handler,
		},
		{
			MethodName: "GetSurveyStatsBySurveyId",
			Handler:    _SurveyService_GetSurveyStatsBySurveyId_Handler,
		},
		{
			MethodName: "GetSurveyStatsByUserId",
			Handler:    _SurveyService_GetSurveyStatsByUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/survey.proto",
}

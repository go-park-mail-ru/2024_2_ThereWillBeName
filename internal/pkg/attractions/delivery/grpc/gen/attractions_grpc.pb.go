// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: internal/pkg/attractions/delivery/grpc/proto/attractions.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Attractions_GetPlaces_FullMethodName           = "/attractions.Attractions/GetPlaces"
	Attractions_GetPlace_FullMethodName            = "/attractions.Attractions/GetPlace"
	Attractions_SearchPlaces_FullMethodName        = "/attractions.Attractions/SearchPlaces"
	Attractions_GetPlacesByCategory_FullMethodName = "/attractions.Attractions/GetPlacesByCategory"
)

// AttractionsClient is the client API for Attractions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttractionsClient interface {
	GetPlaces(ctx context.Context, in *GetPlacesRequest, opts ...grpc.CallOption) (*GetPlacesResponse, error)
	// rpc CreatePlace(CreatePlaceRequest) returns (CreatePlaceResponse) {}
	GetPlace(ctx context.Context, in *GetPlaceRequest, opts ...grpc.CallOption) (*GetPlaceResponse, error)
	// rpc UpdatePlace(UpdatePlaceRequest) returns (UpdatePlaceResponse) {}
	// rpc DeletePlace(DeletePlaceRequest) returns (DeletePlaceResponse) {}
	SearchPlaces(ctx context.Context, in *SearchPlacesRequest, opts ...grpc.CallOption) (*SearchPlacesResponse, error)
	GetPlacesByCategory(ctx context.Context, in *GetPlacesByCategoryRequest, opts ...grpc.CallOption) (*GetPlacesByCategoryResponse, error)
}

type attractionsClient struct {
	cc grpc.ClientConnInterface
}

func NewAttractionsClient(cc grpc.ClientConnInterface) AttractionsClient {
	return &attractionsClient{cc}
}

func (c *attractionsClient) GetPlaces(ctx context.Context, in *GetPlacesRequest, opts ...grpc.CallOption) (*GetPlacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlacesResponse)
	err := c.cc.Invoke(ctx, Attractions_GetPlaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attractionsClient) GetPlace(ctx context.Context, in *GetPlaceRequest, opts ...grpc.CallOption) (*GetPlaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlaceResponse)
	err := c.cc.Invoke(ctx, Attractions_GetPlace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attractionsClient) SearchPlaces(ctx context.Context, in *SearchPlacesRequest, opts ...grpc.CallOption) (*SearchPlacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchPlacesResponse)
	err := c.cc.Invoke(ctx, Attractions_SearchPlaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attractionsClient) GetPlacesByCategory(ctx context.Context, in *GetPlacesByCategoryRequest, opts ...grpc.CallOption) (*GetPlacesByCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlacesByCategoryResponse)
	err := c.cc.Invoke(ctx, Attractions_GetPlacesByCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttractionsServer is the server API for Attractions service.
// All implementations must embed UnimplementedAttractionsServer
// for forward compatibility.
type AttractionsServer interface {
	GetPlaces(context.Context, *GetPlacesRequest) (*GetPlacesResponse, error)
	// rpc CreatePlace(CreatePlaceRequest) returns (CreatePlaceResponse) {}
	GetPlace(context.Context, *GetPlaceRequest) (*GetPlaceResponse, error)
	// rpc UpdatePlace(UpdatePlaceRequest) returns (UpdatePlaceResponse) {}
	// rpc DeletePlace(DeletePlaceRequest) returns (DeletePlaceResponse) {}
	SearchPlaces(context.Context, *SearchPlacesRequest) (*SearchPlacesResponse, error)
	GetPlacesByCategory(context.Context, *GetPlacesByCategoryRequest) (*GetPlacesByCategoryResponse, error)
	mustEmbedUnimplementedAttractionsServer()
}

// UnimplementedAttractionsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAttractionsServer struct{}

func (UnimplementedAttractionsServer) GetPlaces(context.Context, *GetPlacesRequest) (*GetPlacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaces not implemented")
}
func (UnimplementedAttractionsServer) GetPlace(context.Context, *GetPlaceRequest) (*GetPlaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlace not implemented")
}
func (UnimplementedAttractionsServer) SearchPlaces(context.Context, *SearchPlacesRequest) (*SearchPlacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPlaces not implemented")
}
func (UnimplementedAttractionsServer) GetPlacesByCategory(context.Context, *GetPlacesByCategoryRequest) (*GetPlacesByCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlacesByCategory not implemented")
}
func (UnimplementedAttractionsServer) mustEmbedUnimplementedAttractionsServer() {}
func (UnimplementedAttractionsServer) testEmbeddedByValue()                     {}

// UnsafeAttractionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttractionsServer will
// result in compilation errors.
type UnsafeAttractionsServer interface {
	mustEmbedUnimplementedAttractionsServer()
}

func RegisterAttractionsServer(s grpc.ServiceRegistrar, srv AttractionsServer) {
	// If the following call pancis, it indicates UnimplementedAttractionsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Attractions_ServiceDesc, srv)
}

func _Attractions_GetPlaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttractionsServer).GetPlaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Attractions_GetPlaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttractionsServer).GetPlaces(ctx, req.(*GetPlacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attractions_GetPlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttractionsServer).GetPlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Attractions_GetPlace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttractionsServer).GetPlace(ctx, req.(*GetPlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attractions_SearchPlaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPlacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttractionsServer).SearchPlaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Attractions_SearchPlaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttractionsServer).SearchPlaces(ctx, req.(*SearchPlacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attractions_GetPlacesByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlacesByCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttractionsServer).GetPlacesByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Attractions_GetPlacesByCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttractionsServer).GetPlacesByCategory(ctx, req.(*GetPlacesByCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Attractions_ServiceDesc is the grpc.ServiceDesc for Attractions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Attractions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "attractions.Attractions",
	HandlerType: (*AttractionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlaces",
			Handler:    _Attractions_GetPlaces_Handler,
		},
		{
			MethodName: "GetPlace",
			Handler:    _Attractions_GetPlace_Handler,
		},
		{
			MethodName: "SearchPlaces",
			Handler:    _Attractions_SearchPlaces_Handler,
		},
		{
			MethodName: "GetPlacesByCategory",
			Handler:    _Attractions_GetPlacesByCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/pkg/attractions/delivery/grpc/proto/attractions.proto",
}

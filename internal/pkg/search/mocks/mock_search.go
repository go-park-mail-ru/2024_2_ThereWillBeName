// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/search/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "2024_2_ThereWillBeName/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSearchUsecase is a mock of SearchUsecase interface.
type MockSearchUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSearchUsecaseMockRecorder
}

// MockSearchUsecaseMockRecorder is the mock recorder for MockSearchUsecase.
type MockSearchUsecaseMockRecorder struct {
	mock *MockSearchUsecase
}

// NewMockSearchUsecase creates a new mock instance.
func NewMockSearchUsecase(ctrl *gomock.Controller) *MockSearchUsecase {
	mock := &MockSearchUsecase{ctrl: ctrl}
	mock.recorder = &MockSearchUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchUsecase) EXPECT() *MockSearchUsecaseMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockSearchUsecase) Search(ctx context.Context, query string) ([]models.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, query)
	ret0, _ := ret[0].([]models.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSearchUsecaseMockRecorder) Search(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSearchUsecase)(nil).Search), ctx, query)
}

// MockSearchRepo is a mock of SearchRepo interface.
type MockSearchRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSearchRepoMockRecorder
}

// MockSearchRepoMockRecorder is the mock recorder for MockSearchRepo.
type MockSearchRepoMockRecorder struct {
	mock *MockSearchRepo
}

// NewMockSearchRepo creates a new mock instance.
func NewMockSearchRepo(ctrl *gomock.Controller) *MockSearchRepo {
	mock := &MockSearchRepo{ctrl: ctrl}
	mock.recorder = &MockSearchRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchRepo) EXPECT() *MockSearchRepoMockRecorder {
	return m.recorder
}

// SearchCitiesAndPlacesBySubString mocks base method.
func (m *MockSearchRepo) SearchCitiesAndPlacesBySubString(ctx context.Context, query string) ([]models.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCitiesAndPlacesBySubString", ctx, query)
	ret0, _ := ret[0].([]models.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCitiesAndPlacesBySubString indicates an expected call of SearchCitiesAndPlacesBySubString.
func (mr *MockSearchRepoMockRecorder) SearchCitiesAndPlacesBySubString(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCitiesAndPlacesBySubString", reflect.TypeOf((*MockSearchRepo)(nil).SearchCitiesAndPlacesBySubString), ctx, query)
}

version: "3.3"

services:
  gateway:
    container_name: gateway
    build:
      context: .
      dockerfile: build/gateway.Dockerfile
    env_file:
      - .env
    environment:
      - LOG_LEVEL=Debug
    volumes:
      - ./assets/avatars:/assets/avatars
    ports:
      - "8080:8080"
    depends_on:
      - tripdb
    networks:
      - my_network
  attractions:
    container_name: attractions
    build:
      context: .
      dockerfile: build/attraction.Dockerfile
    env_file:
      - .env
    environment:
      - LOG_LEVEL=Debug
    volumes:
      - ./assets/avatars:/assets/avatars
    ports:
      - "8081:8081"
    depends_on:
      - tripdb
    networks:
      - my_network
  trips:
    container_name: trips
    build:
      context: .
      dockerfile: build/trips.Dockerfile
    env_file:
      - .env
    environment:
      - LOG_LEVEL=Debug
    volumes:
      - ./assets/avatars:/assets/avatars
    ports:
      - "50053:50053"
    depends_on:
      - tripdb
    networks:
      - my_network
  users:
    container_name: users
    build:
      context: .
      dockerfile: build/users.Dockerfile
    env_file:
      - .env
    environment:
      - AVATAR_STORAGE_PATH=/assets/avatars
      - LOG_LEVEL=Debug
    volumes:
      - ./assets/avatars:/assets/avatars
    ports:
      - "50052:50052"
    depends_on:
      - tripdb
    networks:
      - my_network
  survey:
    container_name: survey
    build:
      context: .
      dockerfile: build/survey.Dockerfile
    env_file:
      - .env
    environment:
      - AVATAR_STORAGE_PATH=/assets/avatars
      - LOG_LEVEL=Debug
    volumes:
      - ./assets/avatars:/assets/avatars
    ports:
      - "50054:50054"
    depends_on:
      - tripdb
    networks:
      - my_network
  tripdb:
    container_name: postgres
    image: postgres:15
    environment:
        POSTGRES_DB: "trip"
        POSTGRES_USER: "service"
        POSTGRES_PASSWORD: "test"
    volumes:
      - ./db/migrations:/docker-entrypoint-initdb.d
      - ./data:/var/lib/postgresql/data
    restart: unless-stopped
    ports:
      - "5432:5432"
    networks:
      - my_network
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - my_network
  node_exporter:
    depends_on:
      - prometheus
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    hostname: node_exporter
    ports:
      - "9100:9100"
    networks:
      - my_network
  grafana:
    image: grafana/grafana-enterprise
    volumes:
      - ./grafana:/var/lib/grafana/
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    ports:
      - "3000:3000"
    networks:
      - my_network

networks:
  my_network:
